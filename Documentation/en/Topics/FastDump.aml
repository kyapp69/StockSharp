<?xml version="1.0" encoding="utf-8"?>
<topic id="875c5503-ba67-4973-adae-7ded540ab83c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The FAST connector is available in dump mode. In this case, the data does not come from a real network connection, but from the accumulated files of the app <link xlink:href="efb4cf8e-9bf4-495d-942e-84b2cf826eaf" />.</para>
      <para>In order to enable dump mode, it is necessary to transfer files through the dump method <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Fix.Dialects.IFastDialect.Dump</codeEntityReference> before process connecting:</para>
      <code language="C#">
<![CDATA[

// ... connector initialization

var fastAdapter = (FastMessageAdapter)connector.Adapters.InnerAdapters.First();

IEnumerable<string> dumpFiles = Directory.GetFiles(dumpDir, "*.bin");

var dict = dumpFiles.Select(f =>
{
	var name = Path.GetFileNameWithoutExtension(f);

	var parts = name.Split('_').Skip(1).ToArray();

	var groupAddr = parts[0];
	var port = parts[1];
	var sourceAddr = parts[2];

	if (sourceAddr.IsEmpty())
		sourceAddr = null;

	return Tuple.Create(new MulticastSourceAddress
	{
		GroupAddress = groupAddr.To<IPAddress>(),
		Port = port.To<int>(),
		SourceAddress = sourceAddr.To<IPAddress>(),
	}, f);
}).GroupBy(t => t.Item1).ToDictionary(g => g.Key, g => (IEnumerable<Stream>)g.Select(p => File.OpenRead(p.Item2)).ToArray());
			
fastAdapter.DialectSettings.Dump(dict);

// ...

connector.Connect();
]]>
</code>
		<para>After that, the work with the connector proceeds as usual, as if it was receiving data from the network.</para>
    </introduction>
  </developerConceptualDocument>
</topic>